import React, { useState, useEffect } from 'react';

// Beispiel-Daten basierend auf der Excel-Datei
const KLASSEN = [
  '05a', '05b', '05c', '05d',
  '06a', '06b', '06c', '06d', 
  '07a', '07b', '07c', '07d', '07e',
  '08a', '08b', '08c', '08d',
  '09a', '09b', '09c', '09d',
  '10a', '10b', '10c', '10d'
];

const FÄCHER = [
  'Deutsch', 'Mathematik', 'Englisch', 'Französisch',
  'Politik', 'Geschichte', 'Erdkunde', 'Biologie', 
  'Physik', 'Chemie', 'Kunst', 'Musik', 'Sport',
  'kath. Religion', 'ev. Religion', 'PP'
];

const LEHRER = [
  { kürzel: 'BEU', name: 'Beulen, Stephanie', fächer: ['E', 'GE', 'EK', 'PK'] },
  { kürzel: 'KRO', name: 'Krollmann, Monika', fächer: ['D', 'KR', 'PK'] },
  { kürzel: 'SOE', name: 'Schöneweis, Heike', fächer: ['M', 'PP'] },
  { kürzel: 'NIE', name: 'Niewels, Wibke', fächer: ['D', 'E', 'KU', 'PK', 'GE'] },
  { kürzel: 'DIR', name: 'Dirr, Volker', fächer: ['M', 'PH', 'IF'] },
  { kürzel: 'MOE', name: 'Möbius, Raik', fächer: ['M', 'PH', 'TC'] },
  { kürzel: 'REH', name: 'Rehberg, Annette', fächer: ['BI', 'SP', 'M', 'SOL', 'PK'] }
];

const LehrerZuordnung = () => {
  const [zuordnungen, setZuordnungen] = useState({});
  const [filterKlasse, setFilterKlasse] = useState('alle');
  const [filterFach, setFilterFach] = useState('alle');
  const [lehrerBelastung, setLehrerBelastung] = useState({});

  // Berechnung der Lehrerbelastung
  useEffect(() => {
    const belastung = {};
    LEHRER.forEach(lehrer => {
      belastung[lehrer.kürzel] = {
        zugeordnet: 0,
        maximum: 28 // Standard-Deputat
      };
    });

    Object.values(zuordnungen).forEach(assignment => {
      if (assignment.lehrer && belastung[assignment.lehrer]) {
        belastung[assignment.lehrer].zugeordnet += assignment.stunden || 0;
      }
    });

    setLehrerBelastung(belastung);
  }, [zuordnungen]);

  const getZuordnungsKey = (klasse, fach) => `${klasse}-${fach}`;

  const updateZuordnung = (klasse, fach, lehrer, stunden = 4) => {
    const key = getZuordnungsKey(klasse, fach);
    setZuordnungen(prev => ({
      ...prev,
      [key]: { klasse, fach, lehrer, stunden }
    }));
  };

  const removeZuordnung = (klasse, fach) => {
    const key = getZuordnungsKey(klasse, fach);
    setZuordnungen(prev => {
      const { [key]: removed, ...rest } = prev;
      return rest;
    });
  };

  const getVerfügbareLehrer = (fach) => {
    // Vereinfachte Zuordnung der Fächer zu Kürzeln
    const fachMapping = {
      'Deutsch': 'D', 'Mathematik': 'M', 'Englisch': 'E',
      'Geschichte': 'GE', 'Erdkunde': 'EK', 'Politik': 'PK',
      'Biologie': 'BI', 'Physik': 'PH', 'Chemie': 'CH',
      'Sport': 'SP', 'Kunst': 'KU', 'Musik': 'MU'
    };
    
    const fachKürzel = fachMapping[fach];
    return LEHRER.filter(lehrer => 
      lehrer.fächer.includes(fachKürzel)
    );
  };

  const getKonfliktStatus = (lehrer) => {
    const belastung = lehrerBelastung[lehrer];
    if (!belastung) return 'normal';
    
    if (belastung.zugeordnet > belastung.maximum) return 'überlastet';
    if (belastung.zugeordnet > belastung.maximum * 0.9) return 'grenzwertig';
    return 'normal';
  };

  const gefilteterteKlassen = filterKlasse === 'alle' ? KLASSEN : 
    KLASSEN.filter(k => k.startsWith(filterKlasse));

  const gefilterteFächer = filterFach === 'alle' ? FÄCHER : 
    FÄCHER.filter(f => f === filterFach);

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-3xl font-bold mb-6 text-gray-800">
          Lehrer-Fächer-Zuordnung
        </h1>

        {/* Filter */}
        <div className="bg-white p-4 rounded-lg shadow mb-6 flex gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Jahrgangsstufe
            </label>
            <select 
              value={filterKlasse}
              onChange={(e) => setFilterKlasse(e.target.value)}
              className="border rounded px-3 py-2"
            >
              <option value="alle">Alle Klassen</option>
              <option value="05">Jahrgang 5</option>
              <option value="06">Jahrgang 6</option>
              <option value="07">Jahrgang 7</option>
              <option value="08">Jahrgang 8</option>
              <option value="09">Jahrgang 9</option>
              <option value="10">Jahrgang 10</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Fach
            </label>
            <select 
              value={filterFach}
              onChange={(e) => setFilterFach(e.target.value)}
              className="border rounded px-3 py-2"
            >
              <option value="alle">Alle Fächer</option>
              {FÄCHER.map(fach => (
                <option key={fach} value={fach}>{fach}</option>
              ))}
            </select>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          {/* Hauptzuordnungsbereich */}
          <div className="lg:col-span-3">
            <div className="bg-white rounded-lg shadow overflow-hidden">
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-100">
                    <tr>
                      <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                        Klasse
                      </th>
                      {gefilterteFächer.map(fach => (
                        <th key={fach} className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                          {fach}
                        </th>
                      ))}
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {gefilteterteKlassen.map(klasse => (
                      <tr key={klasse} className="hover:bg-gray-50">
                        <td className="px-4 py-3 font-medium text-gray-900">
                          {klasse}
                        </td>
                        {gefilterteFächer.map(fach => {
                          const key = getZuordnungsKey(klasse, fach);
                          const zuordnung = zuordnungen[key];
                          const verfügbareLehrer = getVerfügbareLehrer(fach);
                          
                          return (
                            <td key={fach} className="px-4 py-3">
                              <div className="flex items-center gap-2">
                                <select
                                  value={zuordnung?.lehrer || ''}
                                  onChange={(e) => {
                                    if (e.target.value) {
                                      updateZuordnung(klasse, fach, e.target.value);
                                    } else {
                                      removeZuordnung(klasse, fach);
                                    }
                                  }}
                                  className="text-sm border rounded px-2 py-1 min-w-20"
                                >
                                  <option value="">--</option>
                                  {verfügbareLehrer.map(lehrer => {
                                    const status = getKonfliktStatus(lehrer.kürzel);
                                    return (
                                      <option 
                                        key={lehrer.kürzel} 
                                        value={lehrer.kürzel}
                                        className={
                                          status === 'überlastet' ? 'text-red-600' :
                                          status === 'grenzwertig' ? 'text-yellow-600' :
                                          'text-green-600'
                                        }
                                      >
                                        {lehrer.kürzel}
                                      </option>
                                    );
                                  })}
                                </select>
                                {zuordnung && (
                                  <input
                                    type="number"
                                    min="1"
                                    max="6"
                                    value={zuordnung.stunden}
                                    onChange={(e) => updateZuordnung(
                                      klasse, fach, zuordnung.lehrer, 
                                      parseInt(e.target.value) || 1
                                    )}
                                    className="w-12 text-xs border rounded px-1 py-1"
                                  />
                                )}
                              </div>
                            </td>
                          );
                        })}
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          {/* Lehrerübersicht */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow p-4">
              <h3 className="text-lg font-medium mb-4 text-gray-800">
                Lehrerbelastung
              </h3>
              <div className="space-y-3">
                {LEHRER.map(lehrer => {
                  const belastung = lehrerBelastung[lehrer.kürzel];
                  const prozent = belastung ? 
                    (belastung.zugeordnet / belastung.maximum) * 100 : 0;
                  
                  return (
                    <div key={lehrer.kürzel} className="border rounded p-3">
                      <div className="flex justify-between items-center mb-2">
                        <span className="font-medium text-sm">
                          {lehrer.kürzel}
                        </span>
                        <span className="text-xs text-gray-600">
                          {belastung?.zugeordnet || 0}/{belastung?.maximum || 28}
                        </span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className={`h-2 rounded-full ${
                            prozent > 100 ? 'bg-red-500' :
                            prozent > 90 ? 'bg-yellow-500' :
                            'bg-green-500'
                          }`}
                          style={{width: `${Math.min(prozent, 100)}%`}}
                        ></div>
                      </div>
                      <div className="text-xs text-gray-600 mt-1">
                        Fächer: {lehrer.fächer.join(', ')}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default LehrerZuordnung;